name: Tag sync
on:
  push:
    branch: master

env:
  APP_ID: 174141
  APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: install depends for load scripts
        run: |
          npm install @octokit/rest
          npm install @octokit/auth-app
          npm install @actions/github
          npm install @actions/core
          npm install -g tag-syncer@1.1.9
      - name: Sync tags
        uses: actions/github-script@v6
        env:
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
        with:
          script: |
            const { Octokit } = require("@octokit/rest");
            const { createAppAuth } = require("@octokit/auth-app");
            const { base, head } = process.env;
            const { Tag } = require('tag-syncer')

            const octokit = new Octokit({
              authStrategy: createAppAuth,
              auth: {
                appId: process.env.APP_ID,
                privateKey: process.env.APP_PRIVATE_KEY,
              }
            });
            const app_installation = await octokit.rest.apps.getRepoInstallation({
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            });
            const { token } = await appOctokit.auth({
              type: "installation",
              installationId: app_installation.data.id
            });
            const changedFiles = await octokit.rest.repos.compareCommits({
              ...context.repo,
              base,
              head,
            });
            const files = changedFiles.data.files.map(ele => ele.filename);
            console.log(files)
            const tags = files.filter(item => {
                if (!item.startsWith('tags')) {
                    return false;
                }
                return 'json' === item.split('.')[item.split('.').length -1];
            }));
              
            (async () => {
            for (const files of tags) {
              const root = yamlLoad(files);
              if (root === null) {
                continue;
              }

              const { sha, tag, author, email, description } = root.version;
              await Tag(octokit, "linuxdeepin", "go-gir", sha, tag, description, author, email);
            }
          })()
