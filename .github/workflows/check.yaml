name: Tag check
on:
  pull_request_target:
    paths:
      - 'tags/*.json'

env:
  APP_ID: 174141
  APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.result }}
    steps:
      - name: install depends for load scripts
        run: |
          npm install tag-syncer@1.2.0
          npm install @octokit/rest
      - name: Get token using github-script
        id: get-token
        uses: actions/github-script@v6
        with:
          script: |
            const { APP_ID, APP_PRIVATE_KEY } = process.env;
            const app = {
              APP_ID,
              APP_PRIVATE_KEY
            };

            const repo = {
              owner: context.payload.organization.login,
              repo: context.payload.repository.name
            };
            core.setOutput('app_token', await GetToken(app, repo))
      - name: Matrix files
        uses: actions/github-script@v6
        id: matrix
        env:
          token: ${{ steps.get-token.outputs.app_token }}
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
        with:
          script: |
            const { token, base, head } = process.env;
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit()
            const changedFiles = await octokit.rest.repos.compareCommits({
              ...context.repo,
              base,
              head,
            });
            const files = changedFiles.data.files.map(ele => ele.filename);
            console.log(files)
            return JSON.stringify(files.filter(item => {
                if (!item.startsWith('tags')) {
                    return false;
                }
                return 'json' === item.split('.')[item.split('.').length -1];
            }))
          result-encoding: string
  check:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: [ init ]
    if: ${{ needs.init.outputs.matrix != '[]' && needs.init.outputs.matrix != '' }}
    strategy:
      matrix:
        pkg: ${{fromJson(needs.init.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Check tag
        uses: actions/github-script@v6
        env:
          file: ${{ matrix.pkg }}
        with:
          script: |
            const { Check, yamlLoad } = require("tag-syncer");
            const { file } = process.env;
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit()
            const owner = context.payload.organization.login;
            const repo = context.payload.repository.name;
            const { sha, tag } = yamlLoad(file);
            await Check(octokit, owner, repo, sha, tag)
